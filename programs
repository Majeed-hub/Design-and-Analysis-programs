def find_max(arr, size):
    if size == 1:
        return arr[0]

    rest_max = find_max(arr[1:], size - 1)
    return arr[0] if arr[0] > rest_max else rest_max


def find_min(arr, size):
    if size == 1:
        return arr[0]

    rest_min = find_min(arr[1:], size - 1)
    return arr[0] if arr[0] < rest_min else rest_min


if __name__ == "__main__":
    array = [4, 8, 2, 7, 1, 9, 3]
    size = len(array)

    print("Max:", find_max(array, size))
    print("Min:", find_min(array, size))

----------------------------------------------------------
def merge(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]

        merge(left)
        merge(right)

        merged = []
        i = j = 0

        while (i < len(left)) and (j < len(right)):
            if left[i] < right[j]:
                merged.append(left[i])
                i += 1
            else:
                merged.append(right[j])
                j += 1

        merged.extend(left[i:])
        merged.extend(right[j:])


        arr[:] = merged
        return arr


arr = [21, 43, 6, 1, 3]
print(merge(arr))

--------------------------------------------------------------
def quick(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[0]
    lesser = [x for x in arr[1:] if x <= pivot]
    greater = [x for x in arr[1:] if x > pivot]

    return quick(lesser),[pivot],quick(greater)

arr = [12,43,1,3,4]
print(quick(arr))
--------------------------------------------------------------------------------------------------------------
num_edges = int(input("Enter the number of edges : "))
num_vertices = int(input("Enter the number of vertices : "))

adjacency_matrix = [[0] * num_vertices for _ in range(num_vertices)]

for _ in range(num_edges):
    vertex1, vertex2 = map(int, input().split())
    adjacency_matrix[vertex1 - 1 ][vertex2 - 1] = 1
    adjacency_matrix[vertex2 - 1][vertex1 - 1] = 1

print("\n adjacency matrix \n")
for i in range(num_vertices):
    for j in range(num_vertices):
        print(adjacency_matrix[i][j],end=" ")
    print()

------------------------------------------------------------------------------------------------------------------
n = int(input("Enter the number of vertices "))

adj_matrix = [[int(x) for x in input("Enter adjacency matrix ( 1 yes, 0 no): ").split()] for _ in range(n)]

In_Degree= [sum(row) for row in zip(*adj_matrix)]
Out_Degree = [sum(row) for row in adj_matrix]

for i in range(n):
    print(f"For vertex {i+1} : in-degree = {In_Degree[i]} out-degree = {Out_Degree[i]}")

--------------------------------------------------------------------------------------------------------------
def knapsack(w, wt, profit, n):
    if n == 0 or w == 0:
        return 0
    if wt[n-1] > w:
        knapsack(w, wt, profit, n-1)
    return max(profit[n-1] + knapsack(w - wt[n-1],wt, profit, n-1), knapsack(w, wt, profit, n-1))

n = 3
weight = [10, 20, 30]
profit = [90, 60, 45]
w = 50

print(knapsack(w,weight,profit,n))

--------------------------------------------------------------------------

def isSubset(num, target, n):
    if target == 0:
        return True
    if n == 0:
        return False

    return isSubset(num, target, n - 1) or isSubset(num,  target - num[n-1], n-1)

num = [1,2,3,4]
n = 4
target = 7
print("The Subset is found",isSubset(num,target,n))

-------------------------------------------------------------------------

from itertools import permutations
def solveNQueens(n):
    return [
            ["0 " * i + "Q" + " 0" * (n - i - 1) for i in p]
            for p in permutations(range(n))
            if len(set(map(lambda z: z[0] - z[1], enumerate(p))))
            == len(set(map(lambda z: z[0] + z[1], enumerate(p))))
            == n
        ]
first, second = solveNQueens(4)
for row in first:
    print(row)

-------------------------------------------------------------------------

def findProfit(jobs):
    jobs.sort(key=lambda x: x[2],reverse=True)
    result = []
    profit = 0
    for job in jobs:
        deadline = job[1]
        while deadline > 0 and result.count(None) < deadline:
            result.append(job[0])
            profit += job[2]
            break
    return result, profit


jobs = [("j1", 2, 200), ("j2", 1, 350), ("j3", 3, 100)]
schedule, profit = findProfit(jobs)
print(schedule)
print(profit)

print()
for row in second:
    print(row)

